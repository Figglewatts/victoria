#!/usr/bin/env python3
"""victoria

Victoria is the SRE toolbelt -- a single command with multiple pluggable
subcommands for automating any number of 'toil' tasks that inhibit SRE
productivity.

Author:
    Sam Gibson <sgibson@glasswallsolutions.com>
"""

import argparse
import importlib
import importlib.util

import click

from victoria_core import config
from victoria_core import plugin
from victoria_core.util import basenamenoext

# Used for making it so we can use both -h and --help for help text.
CONTEXT_SETTINGS = {"help_option_names": ["-h", "--help"]}

# TODO(sam): Write full help text
HELP_TEXT = """
V.I.C.T.O.R.I.A.

\b
Very
Important
Commands for
Toil
Optimization:
Reducing
Inessential
Activities
"""

DEFAULT_CONFIG_FILENAME = "victoria.yaml"
"""The default filename of the config file. This will be loaded if no other
file is given."""

VERSION_NUMBER = "0.1"
"""The version number of the application, to print when calling with --version."""

APP_NAME = "victoria"
"""The name of the application."""


class VictoriaCLI(click.MultiCommand):
    """VictoriaCLI overrides click.MultiCommand to support loading click
    commands from python files. This is the bread and butter of the plugin
    system."""
    def list_commands(self, ctx):
        """List the available subcommands."""
        rv = []
        for plgn in ctx.obj.plugins:
            # for each plugin, add the name of the python file as the subcommand name
            rv.append(basenamenoext(plgn))
        rv.sort()
        return rv

    def get_command(self, ctx, name):
        """Get a subcommand from the list of installed plugins."""
        for plgn in ctx.obj.plugins:
            # for each plugin check to see if it matches the given subcommand
            if basenamenoext(plgn) == name:
                return plugin.load(plgn)
        return None


@click.command(cls=VictoriaCLI,
               context_settings=CONTEXT_SETTINGS,
               help=HELP_TEXT)
@click.option(
    "-c",
    "--config-file",
    default=DEFAULT_CONFIG_FILENAME,
    metavar="FILE",
    help=f"The config file to load. Defaults to '{DEFAULT_CONFIG_FILENAME}'.")
@click.version_option(version=VERSION_NUMBER)
@click.pass_context
def cli(ctx, config_file):
    """This is the main CLI of the application. It uses VictoriaCLI to call
    loaded plugins based on subcommand name."""
    pass


if __name__ == "__main__":
    # HACK: use argparse to get the config-file argument, as we need it in
    # VictoriaCLI methods before it would be parsed in the click cli() command...
    # this is utter filth, but I couldn't think of a better way to do it,
    # and it works transparent to the user
    parser = argparse.ArgumentParser(description="", add_help=False)
    parser.add_argument("-c", "--config-file", default=DEFAULT_CONFIG_FILENAME)
    parsed_args, _ = parser.parse_known_args()

    # load the config
    cfg = config.load(parsed_args.config_file)
    if cfg is None:
        raise SystemExit(1)

    # execute the main CLI, passing the config in through the context
    cli.main(obj=cfg)
